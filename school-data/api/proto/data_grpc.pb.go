// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataManagmentClient is the client API for DataManagment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataManagmentClient interface {
	GetStudentById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Student, error)
	GetStudentByLastName(ctx context.Context, in *StudentLastName, opts ...grpc.CallOption) (*StudentList, error)
	GetAllStudents(ctx context.Context, in *StudentParams, opts ...grpc.CallOption) (*StudentList, error)
	GetPopulation(ctx context.Context, in *StudentParams, opts ...grpc.CallOption) (*Population, error)
}

type dataManagmentClient struct {
	cc grpc.ClientConnInterface
}

func NewDataManagmentClient(cc grpc.ClientConnInterface) DataManagmentClient {
	return &dataManagmentClient{cc}
}

func (c *dataManagmentClient) GetStudentById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/parent.DataManagment/GetStudentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagmentClient) GetStudentByLastName(ctx context.Context, in *StudentLastName, opts ...grpc.CallOption) (*StudentList, error) {
	out := new(StudentList)
	err := c.cc.Invoke(ctx, "/parent.DataManagment/GetStudentByLastName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagmentClient) GetAllStudents(ctx context.Context, in *StudentParams, opts ...grpc.CallOption) (*StudentList, error) {
	out := new(StudentList)
	err := c.cc.Invoke(ctx, "/parent.DataManagment/GetAllStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagmentClient) GetPopulation(ctx context.Context, in *StudentParams, opts ...grpc.CallOption) (*Population, error) {
	out := new(Population)
	err := c.cc.Invoke(ctx, "/parent.DataManagment/GetPopulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManagmentServer is the server API for DataManagment service.
// All implementations must embed UnimplementedDataManagmentServer
// for forward compatibility
type DataManagmentServer interface {
	GetStudentById(context.Context, *StudentId) (*Student, error)
	GetStudentByLastName(context.Context, *StudentLastName) (*StudentList, error)
	GetAllStudents(context.Context, *StudentParams) (*StudentList, error)
	GetPopulation(context.Context, *StudentParams) (*Population, error)
	mustEmbedUnimplementedDataManagmentServer()
}

// UnimplementedDataManagmentServer must be embedded to have forward compatible implementations.
type UnimplementedDataManagmentServer struct {
}

func (UnimplementedDataManagmentServer) GetStudentById(context.Context, *StudentId) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedDataManagmentServer) GetStudentByLastName(context.Context, *StudentLastName) (*StudentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentByLastName not implemented")
}
func (UnimplementedDataManagmentServer) GetAllStudents(context.Context, *StudentParams) (*StudentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedDataManagmentServer) GetPopulation(context.Context, *StudentParams) (*Population, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopulation not implemented")
}
func (UnimplementedDataManagmentServer) mustEmbedUnimplementedDataManagmentServer() {}

// UnsafeDataManagmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataManagmentServer will
// result in compilation errors.
type UnsafeDataManagmentServer interface {
	mustEmbedUnimplementedDataManagmentServer()
}

func RegisterDataManagmentServer(s grpc.ServiceRegistrar, srv DataManagmentServer) {
	s.RegisterService(&DataManagment_ServiceDesc, srv)
}

func _DataManagment_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagmentServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.DataManagment/GetStudentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagmentServer).GetStudentById(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagment_GetStudentByLastName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentLastName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagmentServer).GetStudentByLastName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.DataManagment/GetStudentByLastName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagmentServer).GetStudentByLastName(ctx, req.(*StudentLastName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagment_GetAllStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagmentServer).GetAllStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.DataManagment/GetAllStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagmentServer).GetAllStudents(ctx, req.(*StudentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagment_GetPopulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagmentServer).GetPopulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.DataManagment/GetPopulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagmentServer).GetPopulation(ctx, req.(*StudentParams))
	}
	return interceptor(ctx, in, info, handler)
}

// DataManagment_ServiceDesc is the grpc.ServiceDesc for DataManagment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataManagment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parent.DataManagment",
	HandlerType: (*DataManagmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentById",
			Handler:    _DataManagment_GetStudentById_Handler,
		},
		{
			MethodName: "GetStudentByLastName",
			Handler:    _DataManagment_GetStudentByLastName_Handler,
		},
		{
			MethodName: "GetAllStudents",
			Handler:    _DataManagment_GetAllStudents_Handler,
		},
		{
			MethodName: "GetPopulation",
			Handler:    _DataManagment_GetPopulation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/data.proto",
}
