// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParentManagmentClient is the client API for ParentManagment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParentManagmentClient interface {
	CreateStudent(ctx context.Context, in *NewStudent, opts ...grpc.CallOption) (*Student, error)
	EditStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	DeleteStudent(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*StudentId, error)
}

type parentManagmentClient struct {
	cc grpc.ClientConnInterface
}

func NewParentManagmentClient(cc grpc.ClientConnInterface) ParentManagmentClient {
	return &parentManagmentClient{cc}
}

func (c *parentManagmentClient) CreateStudent(ctx context.Context, in *NewStudent, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/parent.ParentManagment/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentManagmentClient) EditStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/parent.ParentManagment/EditStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentManagmentClient) DeleteStudent(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*StudentId, error) {
	out := new(StudentId)
	err := c.cc.Invoke(ctx, "/parent.ParentManagment/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParentManagmentServer is the server API for ParentManagment service.
// All implementations must embed UnimplementedParentManagmentServer
// for forward compatibility
type ParentManagmentServer interface {
	CreateStudent(context.Context, *NewStudent) (*Student, error)
	EditStudent(context.Context, *Student) (*Student, error)
	DeleteStudent(context.Context, *StudentId) (*StudentId, error)
	mustEmbedUnimplementedParentManagmentServer()
}

// UnimplementedParentManagmentServer must be embedded to have forward compatible implementations.
type UnimplementedParentManagmentServer struct {
}

func (UnimplementedParentManagmentServer) CreateStudent(context.Context, *NewStudent) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedParentManagmentServer) EditStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditStudent not implemented")
}
func (UnimplementedParentManagmentServer) DeleteStudent(context.Context, *StudentId) (*StudentId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedParentManagmentServer) mustEmbedUnimplementedParentManagmentServer() {}

// UnsafeParentManagmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParentManagmentServer will
// result in compilation errors.
type UnsafeParentManagmentServer interface {
	mustEmbedUnimplementedParentManagmentServer()
}

func RegisterParentManagmentServer(s grpc.ServiceRegistrar, srv ParentManagmentServer) {
	s.RegisterService(&ParentManagment_ServiceDesc, srv)
}

func _ParentManagment_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentManagmentServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.ParentManagment/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentManagmentServer).CreateStudent(ctx, req.(*NewStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParentManagment_EditStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentManagmentServer).EditStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.ParentManagment/EditStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentManagmentServer).EditStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParentManagment_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentManagmentServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parent.ParentManagment/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentManagmentServer).DeleteStudent(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

// ParentManagment_ServiceDesc is the grpc.ServiceDesc for ParentManagment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParentManagment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parent.ParentManagment",
	HandlerType: (*ParentManagmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _ParentManagment_CreateStudent_Handler,
		},
		{
			MethodName: "EditStudent",
			Handler:    _ParentManagment_EditStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _ParentManagment_DeleteStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/parent.proto",
}
